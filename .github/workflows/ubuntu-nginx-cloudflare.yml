name: Ubuntu Nginx + Cloudflare Auto Setup

on:
  workflow_dispatch:

jobs:
  setup-nginx:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    env:
      DOMAIN: tokoada.web.id
      SUBDOMAIN: www.tokoada.web.id

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: üîê Set root password
        run: |
          if [ -z "${{ secrets.ROOT_PASSWORD }}" ]; then
            echo "‚ùå Secret ROOT_PASSWORD belum diatur!"
            exit 1
          fi
          echo "root:${{ secrets.ROOT_PASSWORD }}" | sudo chpasswd
          echo "::add-mask::${{ secrets.ROOT_PASSWORD }}"
          echo "‚úÖ Root password diatur."

      - name: üß∞ Install Nginx + PHP + Certbot
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx php-fpm php-cli php-curl php-gd php-mbstring php-xml php-zip certbot python3-certbot-nginx ufw curl jq

      - name: üî• Configure Firewall
        run: |
          sudo ufw allow 22/tcp
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw --force enable

      - name: üåç Get Public IP
        run: |
          PUB_IP=$(curl -s ifconfig.me)
          echo "PUBLIC_IP=${PUB_IP}" >> $GITHUB_ENV
          echo "Server public IP is ${PUB_IP}"

      - name: ‚òÅÔ∏è Update Cloudflare DNS (root + www)
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          DOMAIN=${{ env.DOMAIN }}
          SUBDOMAIN=${{ env.SUBDOMAIN }}
          IP=${{ env.PUBLIC_IP }}

          for NAME in $DOMAIN $SUBDOMAIN; do
            RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${NAME}" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json" | jq -r '.result[0].id')

            if [ "$RECORD_ID" = "null" ] || [ -z "$RECORD_ID" ]; then
              echo "üÜï Creating DNS record for ${NAME}"
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records" \
                -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json" \
                --data "{\"type\":\"A\",\"name\":\"${NAME}\",\"content\":\"${IP}\",\"ttl\":1,\"proxied\":true}"
            else
              echo "‚ôªÔ∏è Updating existing DNS record for ${NAME}"
              curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${RECORD_ID}" \
                -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json" \
                --data "{\"type\":\"A\",\"name\":\"${NAME}\",\"content\":\"${IP}\",\"ttl\":1,\"proxied\":true}"
            fi
          done
          echo "‚úÖ Cloudflare DNS synchronized (proxied ‚òÅÔ∏è)"

      - name: üèóÔ∏è Configure Nginx for website
        run: |
          DOMAIN=${{ env.DOMAIN }}
          sudo mkdir -p /var/www/${DOMAIN}
          echo "<h1>Selamat Datang di ${DOMAIN}</h1><p>Server aktif dengan Nginx + Cloudflare ‚òÅÔ∏è</p>" | sudo tee /var/www/${DOMAIN}/index.html

          cat <<EOF | sudo tee /etc/nginx/sites-available/${DOMAIN}
          server {
              listen 80;
              server_name ${DOMAIN} www.${DOMAIN};

              root /var/www/${DOMAIN};
              index index.php index.html;

              location / {
                  try_files \$uri \$uri/ =404;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php-fpm.sock;
              }
          }
          EOF

          sudo ln -s /etc/nginx/sites-available/${DOMAIN} /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl restart nginx
          echo "‚úÖ Nginx configured for ${DOMAIN}"

      - name: üîê Enable SSL via Certbot (Let's Encrypt)
        run: |
          sudo certbot --nginx --non-interactive --agree-tos -m admin@${{ env.DOMAIN }} -d ${{ env.DOMAIN }} -d ${{ env.SUBDOMAIN }} || true
          echo "‚úÖ SSL activated for ${DOMAIN}"

      - name: üìã Summary Report
        run: |
          echo "## üåê Nginx Hosting Setup Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Domain: https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- Subdomain: https://${{ env.SUBDOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cloudflare Proxy: Enabled ‚òÅÔ∏è" >> $GITHUB_STEP_SUMMARY
          echo "- SSL: Active (Let's Encrypt) ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- Web Root: /var/www/${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
